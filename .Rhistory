quarto publish quarto-pub
setwd("C:/Users/mateu/todd2016_1_rescue")
#### Import data
dir_path <- "C:\Users\mateu\todd2016_1_rescue\data"
#### Import data
dir_path <- "C:/Users/mateu/todd2016_1_rescue/data"
csv_files <- list.files(dir_path, pattern = "^results_.*\\.csv$", full.names = TRUE)
#### Load Relevant Libraries and Functions
library(tidyverse)
for (file in csv_files) {
data <- read_csv(file)
combined_data <- rbind(combined_data, data)
}
View(data)
combined_data <- data.frame()
for (file in csv_files) {
data <- read_csv(file)
combined_data <- rbind(combined_data, data)
}
View(combined_data)
raw.data1 <- read_csv(data/results_mateus)
raw.data1 <- read_csv("data/results_mateus.csv")
setwd("C:/Users/mateu/todd2016_1_rescue")
raw.data1 <- read_csv("data/results_mateus.csv")
raw.data1 <- read_csv("C:/Users/mateu/todd2016_1_rescue/data/results_mateus.csv")
raw.data1
raw.data2 <- read_csv("C:/Users/mateu/todd2016_1_rescue/data/results_mateus.csv")
for (file in csv_files) {
data <- read_csv(file)
combined_data <- bind_rows(combined_data, data)
}
processed_dat <- combined_data %>%
# filtering responses that were too slow
filter(!is.na(too_slow_resp.keys))
processed_dat <- combined_data %>%
# filtering responses that were too slow
filter(!is.na(too_slow_resp.keys)) %>%
#selecting and mutating
select(participant, session, face, object,
key_resp.keys, key_resp.rt, trials.thisTrialN, trials.thisIndex,
# add race/ethnicity checks!
)
processed_dat <- combined_data %>%
# filtering responses that were too slow
filter(!is.na(too_slow_resp.keys)) %>%
#selecting and mutating
select(participant, session, face, object,
key_resp.keys, key_resp.rt, trials.thisTrialN, trials.thisIndex,
# add race/ethnicity checks!
) %>%
mutate(ID = participant,
StimRace = ifelse(grepl("b", face), "Black", "White"),
StimObj = ifelse(grepl("t", face), "Toy", "Gun"),
ReactionTime = key_resp.rt,
Correct = ifelse(StimObj == "Gun" & key_resp.keys == "p" | StimObj == "Toy" & key_resp.keys == "q" ), 1, 0)
processed_dat
processed_dat <- combined_data %>%
# filtering responses that were too slow
filter(!is.na(too_slow_resp.keys)) %>%
#selecting and mutating
select(participant, session, face, object,
key_resp.keys, key_resp.rt, trials.thisTrialN, trials.thisIndex,
# add race/ethnicity checks!
)
View(processed_dat)
processed_dat <- combined_data %>%
# filtering responses that were too slow
filter(!is.na(too_slow_resp.keys))
View(processed_dat)
processed_dat <- combined_data %>%
# filtering responses that were too slow
filter(!(key_resp.keys == c("p","q")))
processed_dat <- combined_data %>%
# filtering responses that were too slow
filter(!(key_resp.keys == c("p","q"))) %>%
#selecting and mutating
select(participant, session, face, object,
key_resp.keys, key_resp.rt, trials.thisTrialN, trials.thisIndex,
# add race/ethnicity checks!
)
processed_dat <- combined_data %>%
# filtering responses that were too slow
filter(!(key_resp.keys == c("p","q"))) %>%
#selecting and mutating
select(participant, session, face, object,
key_resp.keys, key_resp.rt, trials.thisTrialN, trials.thisIndex,
# add race/ethnicity checks!
) %>%
mutate(ID = participant,
StimRace = ifelse(grepl("b", face), "Black", "White"),
StimObj = ifelse(grepl("t", face), "Toy", "Gun"),
ReactionTime = key_resp.rt,
Correct = ifelse(StimObj == "Gun" & key_resp.keys == "p" | StimObj == "Toy" & key_resp.keys == "q" , 1, 0))
processed_dat <- combined_data %>%
# filtering responses that were too slow
filter(!(key_resp.keys == c("p","q"))) %>%
#selecting and mutating
select(participant, session, face, object,
key_resp.keys, key_resp.rt, trials.thisTrialN, trials.thisIndex,
# add race/ethnicity checks!
) %>%
mutate(ID = participant,
StimRace = ifelse(grepl("b", face), "Black", "White"),
StimObj = ifelse(grepl("t", face), "Toy", "Gun"),
ReactionTime = key_resp.rt,
Correct = ifelse(StimObj == "Gun" & key_resp.keys == "p" | StimObj == "Toy" & key_resp.keys == "q" , 1, 0)) %>%
-select(participant, face, object, key_resp.rt)
processed_dat <- combined_data %>%
# filtering responses that were too slow
filter(!(key_resp.keys == c("p","q"))) %>%
#selecting and mutating
select(participant, session, face, object,
key_resp.keys, key_resp.rt, trials.thisTrialN, trials.thisIndex,
# add race/ethnicity checks!
) %>%
mutate(ID = participant,
StimRace = ifelse(grepl("b", face), "Black", "White"),
StimObj = ifelse(grepl("t", face), "Toy", "Gun"),
ReactionTime = key_resp.rt,
Correct = ifelse(StimObj == "Gun" & key_resp.keys == "p" | StimObj == "Toy" & key_resp.keys == "q" , 1, 0)) %>%
select(-c(participant, face, object, key_resp.rt))
processed_dat <- combined_data %>%
# filtering responses that were too slow
filter(!(key_resp.keys == c("p","q"))) %>%
#selecting relevant columsn
select(participant, session, face, object,
key_resp.keys, key_resp.rt, trials.thisTrialN, trials.thisIndex
# add race/ethnicity checks!
) %>%
#### Prepare data for analysis - create columns etc.
mutate(ID = participant,
StimRace = ifelse(grepl("b", face), "Black", "White"),
StimObj = ifelse(grepl("t", face), "Toy", "Gun"),
ReactionTime = key_resp.rt,
Correct = ifelse(StimObj == "Gun" & key_resp.keys == "p" | StimObj == "Toy" & key_resp.keys == "q" , 1, 0)) %>%
select(-c(participant, face, object, key_resp.rt))
acc_dat <- processed_dat %>%
group_by(ID) %>%
summarise(mean_accuracy = mean(Correct))
View(acc_dat)
processed_dat <- combined_data %>%
# filtering responses that were too slow
filter(!(key_resp.keys == c("p","q"))) %>%
#selecting relevant columsn
select(participant, session, face, object,
key_resp.keys, key_resp.rt, trials.thisTrialN, trials.thisIndex
# add race/ethnicity checks!
)
table(is.na(combined_data$key_resp.keys))
processed_dat <- combined_data %>%
# filtering responses that were too slow
filter(!(is.na(key_resp.keys )))
processed_dat <- combined_data %>%
# filtering responses that were too slow
filter(!(is.na(key_resp.keys ))) %>%
#selecting relevant columsn
select(participant, session, face, object,
key_resp.keys, key_resp.rt, trials.thisTrialN, trials.thisIndex
# add race/ethnicity checks!
) %>%
#### Prepare data for analysis - create columns etc.
mutate(ID = participant,
StimRace = ifelse(grepl("b", face), "Black", "White"),
StimObj = ifelse(grepl("t", face), "Toy", "Gun"),
ReactionTime = key_resp.rt,
Correct = ifelse(StimObj == "Gun" & key_resp.keys == "p" | StimObj == "Toy" & key_resp.keys == "q" , 1, 0)) %>%
select(-c(participant, face, object, key_resp.rt))
) %>%
#### Prepare data for analysis - create columns etc.
processed_dat <- combined_data %>%
# filtering responses that were too slow
filter(!(is.na(key_resp.keys ))) %>%
#selecting relevant columsn
select(participant, session, face, object,
key_resp.keys, key_resp.rt, trials.thisTrialN, trials.thisIndex) %>%
# add race/ethnicity checks!
#### Prepare data for analysis - create columns etc.
mutate(ID = participant,
StimRace = ifelse(grepl("b", face), "Black", "White"),
StimObj = ifelse(grepl("t", face), "Toy", "Gun"),
ReactionTime = key_resp.rt,
Correct = ifelse(StimObj == "Gun" & key_resp.keys == "p" | StimObj == "Toy" & key_resp.keys == "q" , 1, 0)) %>%
select(-c(participant, face, object, key_resp.rt))
filter(!(is.na(key_resp.keys ))) %>%
#selecting relevant columsn
select(participant, session, face, object,
key_resp.keys, key_resp.rt, trials.thisTrialN, trials.thisIndex
processed_dat <- combined_data %>%
processed_dat <- combined_data %>%
# filtering responses that were too slow
filter(!(is.na(key_resp.keys ))) %>%
#selecting relevant columsn
select(participant, session, face, object,
key_resp.keys, key_resp.rt, trials.thisTrialN, trials.thisIndex)
processed_dat <- combined_data %>%
# filtering responses that were too slow
filter(!(is.na(key_resp.keys ))) %>%
#selecting relevant columsn
select(participant, session, face, object,
key_resp.keys, key_resp.rt, trials.thisTrialN, trials.thisIndex) %>%
# add race/ethnicity checks!
#### Prepare data for analysis - create columns etc.
mutate(ID = participant,
StimRace = ifelse(grepl("w", face), "White", "Black"),
StimObj = ifelse(grepl("g", face), "Gun", "Toy"),
ReactionTime = key_resp.rt,
Correct = ifelse(StimObj == "Gun" & key_resp.keys == "p" | StimObj == "Toy" & key_resp.keys == "q" , 1, 0)) %>%
select(-c(participant, face, object, key_resp.rt))
processed_dat <- combined_data %>%
# filtering responses that were too slow
filter(!(is.na(key_resp.keys ))) %>%
#selecting relevant columsn
select(participant, session, face, object,
key_resp.keys, key_resp.rt, trials.thisTrialN, trials.thisIndex)
processed_dat <- combined_data %>%
# filtering responses that were too slow
filter(!(is.na(key_resp.keys ))) %>%
#selecting relevant columsn
select(participant, session, face, object,
key_resp.keys, key_resp.rt, trials.thisTrialN, trials.thisIndex) %>%
# add race/ethnicity checks!
#### Prepare data for analysis - create columns etc.
mutate(ID = participant,
StimRace = ifelse(grepl("w", face), "White", "Black"),
StimObj = ifelse(grepl("g", object), "Gun", "Toy"),
ReactionTime = key_resp.rt,
Correct = ifelse(StimObj == "Gun" & key_resp.keys == "p" | StimObj == "Toy" & key_resp.keys == "q" , 1, 0)) %>%
select(-c(participant, face, object, key_resp.rt))
acc_dat <- processed_dat %>%
group_by(ID) %>%
summarise(mean_accuracy = mean(Correct))
processed_dat <- combined_data %>%
# filtering responses that were too slow
filter(!(is.na(key_resp.keys ))) %>%
#selecting relevant columsn
select(participant, session, face, object,
key_resp.keys, key_resp.rt, trials.thisTrialN, trials.thisIndex) %>%
# add race/ethnicity checks!
#### Prepare data for analysis - create columns etc.
mutate(ID = participant,
StimRace = ifelse(grepl("w", face), "White", "Black"),
StimObj = ifelse(grepl("g", object), "Gun", "Toy"),
ReactionTime = key_resp.rt,
LogRT = log(key_resp.rt),
Correct = ifelse(StimObj == "Gun" & key_resp.keys == "p" | StimObj == "Toy" & key_resp.keys == "q" , 1, 0)) %>%
select(-c(participant, face, object, key_resp.rt))
acc_dat <- processed_dat %>%
group_by(ID, StimRace, StimObj) %>%
summarise(mean_accuracy = mean(Correct)) %>%
filter(mean_accuracy > 0.499)
aov_dat <- processed_dat %>%
group_by(StimRace, StimObj) %>%
get_summary_stats(mean_logRT, type = "mean_sd")
library(rstatix)
install.packages("rstatix")
#install.packages("rstatix")
library(rstatix)
aov_dat <- processed_dat %>%
group_by(StimRace, StimObj) %>%
get_summary_stats(mean_logRT, type = "mean_sd")
aov_dat <- processed_dat %>%
as_factor(StimRace, StimObj) %>%
group_by(StimRace, StimObj) %>%
get_summary_stats(LogRT, type = "mean_sd")
processed_dat$StimRace <-  as_factor(StimRace)
# Turning into factors for ANOVA
processed_dat$StimRace <-  as_factor(processed_dat$StimRace)
processed_dat$StimObj <-  as_factor(processed_dat$StimObj)
aov_dat <- processed_dat %>%
group_by(StimRace, StimObj) %>%
get_summary_stats(LogRT, type = "mean_sd")
View(aov_dat)
bxp <- aov_dat %>%
ggboxplot( x = "StimObj", y = "LogRT",
color = "StimRace", palette = "jco"
)
library(ggplot2)
bxp <- aov_dat %>%
ggboxplot( x = "StimObj", y = "LogRT",
color = "StimRace", palette = "jco"
)
library(ggpubr)
install.packages("ggpubr")
#install.packages("ggpubr")
library(ggpubr)
bxp <- aov_dat %>%
ggboxplot( x = "StimObj", y = "LogRT",
color = "StimRace", palette = "jco"
)
bxp
bxp <- processed_dat %>%
ggboxplot( x = "StimObj", y = "ReactionTime",
color = "StimRace", palette = "jco"
)
bxp
bxp <- processed_dat %>%
ggboxplot( x = "StimRace", y = "ReactionTime",
color = "StimObj", palette = "jco"
)
bxp
bxp <- processed_dat %>%
ggboxplot( x = "StimObj", y = "ReactionTime",
color = "StimRace", palette = "jco"
)
bxp
anova <- anova_test(
data = processed_dat, dv = LogRT, wid = ID,
within = c(StimRace, StimObj))
acc_dat <- processed_dat %>%
group_by(ID, StimRace, StimObj) %>%
summarise(mean_accuracy = mean(Correct)) %>%
filter(mean_accuracy > 0.499) %>%
ungroup()
acc_dat <- processed_dat %>%
group_by(ID, StimRace, StimObj) %>%
summarise(mean_accuracy = mean(Correct), .groups = F) %>%
filter(mean_accuracy > 0.499)
sum_dat <- processed_dat %>%
group_by(StimRace, StimObj, ID) %>%
get_summary_stats(LogRT, type = "mean_sd")
View(sum_dat)
aov_dat <- processed_dat %>%
group_by(ID) %>%
summarise(mean_logRT = mean(LogRT))
View(aov_dat)
aov_dat <- processed_dat %>%
group_by(ID, StimRace, StimObj) %>%
summarise(mean_logRT = mean(LogRT))
anova <- anova_test(
data = aov_dat, dv = mean_logRT, wid = ID,
within = c(StimRace, StimObj))
processed_dat$ID <-  as_factor(processed_dat$ID)
processed_dat$StimRace <-  as_factor(processed_dat$StimRace)
processed_dat$StimObj <-  as_factor(processed_dat$StimObj)
#ANOVA data prep
aov_dat <- processed_dat %>%
group_by(ID, StimRace, StimObj) %>%
summarise(mean_logRT = mean(LogRT))
anova <- anova_test(
data = aov_dat, dv = mean_logRT, wid = ID,
within = c(StimRace, StimObj))
library(lme)
library(lme4)
lmer( data = processed_dat,
LogRT ~ StimObj + StimRace + (1|ID))
lmer( data = processed_dat,
LogRT ~ StimObj*StimRace (1|ID))
lmer( data = processed_dat,
LogRT ~ StimObj*StimRace + (1|ID))
aov_model <- aov(
mean_logRT ~ StimObj*StimRace + Error(ID/(StimObj*StimRace)))
aov_model <- aov( data = aov_dat,
mean_logRT ~ StimObj*StimRace + Error(ID/(StimObj*StimRace)))
summary(aov_model)
aov_model <- aov( data = processed_dat,
LogRT ~ StimObj*StimRace + Error(ID/(StimObj*StimRace)))
summary(aov_model)
install.packages("ez")
#install.packages("ez")
library(ez)
# Perform the repeated measures ANOVA
anova_result <- ezANOVA(data = processed_dat,
dv = .(LogRT),
wid = .(ID),
within = .(StimRace, StimObj),
detailed = TRUE)
# Print the ANOVA summary
print(anova_result)
