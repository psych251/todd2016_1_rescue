non_whites
processed_dat <- combined_data %>%
#filtering non-whites
filter(!(participant == "5c97df1f9e1eff001662ed96" |
participant == "603421c858a3bd213d7c24b2"|
participant == "613e002e81f4b2409b531dbd"))
# N check
t2 <- table(processed_dat$participant)
nrow(t2)
processed_dat <- processed_dat %>%
mutate(
ID = participant,
StimRace = ifelse(grepl("w", face), "White", "Black"),
StimObj = ifelse(grepl("g", object), "Gun", "Toy"),
ReactionTime = key_resp.rt,
LogRT = log(key_resp.rt),
Correct = ifelse(StimObj == "Gun" & key_resp.keys == "p" | StimObj == "Toy" & key_resp.keys == "q" ,1,  0),
too_slow = ifelse(is.na(too_slow_resp.keys), FALSE, TRUE)
) %>%
mutate(Correct = ifelse(too_slow == T, 0, Correct )) %>%
filter(!(is.na(Correct))) %>%
select(c(ID, StimRace, StimObj, ReactionTime, LogRT, Correct, too_slow))
# N check
t3 <- table(processed_dat$ID)
nrow(t3)
acc_dat <- processed_dat  %>%
group_by(ID) %>%
summarise(mean_accuracy = mean(Correct))
acc_dat
exclude_list <- acc_dat %>%
filter(mean_accuracy < 0.6) %>%
select(-c(mean_accuracy))
exclude_list <- c(exclude_list$ID) # N = 12 people
processed_dat <- processed_dat %>%
filter(!(ID %in% exclude_list))
# N check
t3 <- table(processed_dat$ID)
nrow(t3)
processed_dat <- processed_dat %>%
filter(ReactionTime > 0.1 & too_slow == F)
# N check
t4 <- table(processed_dat$ID)
nrow(t4)
# Turning into factors for ANOVA
processed_dat$ID <-  as_factor(processed_dat$ID)
processed_dat$StimRace <-  as_factor(processed_dat$StimRace)
processed_dat$StimObj <-  as_factor(processed_dat$StimObj)
#Looking at summarized data
sum_dat <- processed_dat %>%
filter(Correct == 1) %>%
group_by(StimRace, StimObj, ID) %>%
get_summary_stats(LogRT, type = "mean_sd")
sum_dat
#Barplot with CI bars
sum_dat_plot <- processed_dat %>%
filter(Correct == 1) %>%
group_by(StimObj, StimRace) %>%
summarise(
n=n(),
mean=mean(ReactionTime),
sd=sd(ReactionTime)
) %>%
mutate( se=sd/sqrt(n))  %>%
mutate( ci=se * qt((1-0.05)/2 + .5, n-1))
sum_dat_plot
barplot_rescue <- sum_dat_plot %>%
ggplot(aes(x=StimObj, y=mean, fill=StimRace)) +
geom_bar(stat = "identity", position=position_dodge()) +
geom_errorbar(aes(ymin=mean-ci, ymax=mean+ci), width=.2,
position=position_dodge(.9)) +
ggthemes::theme_few() +
coord_cartesian( ylim = c(0.15, 0.5)) +
scale_fill_brewer(palette="Paired") +
ggtitle( "Rescue Attempt" )
barplot_rescue
# ANOVA was not working due to one infinite value, so deleting this value
processed_dat <- processed_dat %>%
filter(Correct == 1) %>%
filter(is.finite(LogRT))
aov_model <- aov( data = processed_dat,
LogRT ~ StimObj*StimRace + Error(ID/(StimObj*StimRace)))
summary(aov_model)
# Consider this model
lmm <- lmerTest::lmer( data = processed_dat,
LogRT ~ StimObj*StimRace + (StimObj*StimRace|ID))
summary(lmm)
simple_slopes(lmm)
1- pbinom(0.6*144, 144, 0.5)
### Load Relevant Libraries and Functions
library(tidyverse)
#install.packages("rstatix")
library(rstatix)
library(ggplot2)
#install.packages("ggpubr")
library(ggpubr)
library(lme4)
#install.packages("ez")
library(ez)
library(ggthemes)
#install.packages("reghelper")
library(reghelper)
#install.packages("apaTables")
library(apaTables)
dir_path <- "C:/Users/mateu/OneDrive/Desktop/Stanford/01_Fall 2023/Psych Exp Methods/data_prolific_v2"
csv_files <- list.files(dir_path, pattern = "2023-12-12.*\\.csv$", full.names = TRUE)
combined_data <- data.frame()
for (file in csv_files) {
data <- read_csv(file)
combined_data <- bind_rows(combined_data, data)
}
# Storing raw data so I don't have to run this loop all the time
combined_data_raw <- combined_data
data_csv <- combined_data_raw %>%
select(-c(participant,session,study_id, OS))
write.csv(data_csv, "C:/Users/mateu/todd2016_1_rescue/data\\data_csv.csv")
t1 <- table(combined_data$participant)
nrow(t1)
# OBS: this includes people who did not finish the experiment
#Are there non-whites?
table(combined_data$key_resp_race_check.keys)
non_whites <- combined_data %>%
select(participant, key_resp_race_check.keys) %>%
filter(key_resp_race_check.keys == "a"|
key_resp_race_check.keys =="b"|
key_resp_race_check.keys =="n")
non_whites
processed_dat <- combined_data %>%
#filtering non-whites
filter(!(participant == "5c97df1f9e1eff001662ed96" |
participant == "603421c858a3bd213d7c24b2"|
participant == "613e002e81f4b2409b531dbd"))
# N check
t2 <- table(processed_dat$participant)
nrow(t2)
processed_dat <- processed_dat %>%
mutate(
ID = participant,
StimRace = ifelse(grepl("w", face), "White", "Black"),
StimObj = ifelse(grepl("g", object), "Gun", "Toy"),
ReactionTime = key_resp.rt,
LogRT = log(key_resp.rt),
Correct = ifelse(StimObj == "Gun" & key_resp.keys == "p" | StimObj == "Toy" & key_resp.keys == "q" ,1,  0),
too_slow = ifelse(is.na(too_slow_resp.keys), FALSE, TRUE)
) %>%
mutate(Correct = ifelse(too_slow == T, 0, Correct )) %>%
filter(!(is.na(Correct))) %>%
select(c(ID, StimRace, StimObj, ReactionTime, LogRT, Correct, too_slow))
# N check
t3 <- table(processed_dat$ID)
nrow(t3)
acc_dat <- processed_dat  %>%
group_by(ID) %>%
summarise(mean_accuracy = mean(Correct))
acc_dat
exclude_list <- acc_dat %>%
filter(mean_accuracy < 0.6) %>%
select(-c(mean_accuracy))
exclude_list <- c(exclude_list$ID) # N = 12 people
processed_dat <- processed_dat %>%
filter(!(ID %in% exclude_list))
# N check
t3 <- table(processed_dat$ID)
nrow(t3)
processed_dat <- processed_dat %>%
filter(ReactionTime > 0.1 & too_slow == F)
# N check
t4 <- table(processed_dat$ID)
nrow(t4)
# Turning into factors for ANOVA
processed_dat$ID <-  as_factor(processed_dat$ID)
processed_dat$StimRace <-  as_factor(processed_dat$StimRace)
processed_dat$StimObj <-  as_factor(processed_dat$StimObj)
#Looking at summarized data
sum_dat <- processed_dat %>%
filter(Correct == 1) %>%
group_by(StimRace, StimObj, ID) %>%
get_summary_stats(LogRT, type = "mean_sd")
sum_dat
#Barplot with CI bars
sum_dat_plot <- processed_dat %>%
filter(Correct == 1) %>%
group_by(StimObj, StimRace) %>%
summarise(
n=n(),
mean=mean(ReactionTime),
sd=sd(ReactionTime)
) %>%
mutate( se=sd/sqrt(n))  %>%
mutate( ci=se * qt((1-0.05)/2 + .5, n-1))
sum_dat_plot
barplot_rescue <- sum_dat_plot %>%
ggplot(aes(x=StimObj, y=mean, fill=StimRace)) +
geom_bar(stat = "identity", position=position_dodge()) +
geom_errorbar(aes(ymin=mean-ci, ymax=mean+ci), width=.2,
position=position_dodge(.9)) +
ggthemes::theme_few() +
coord_cartesian( ylim = c(0.15, 0.5)) +
scale_fill_brewer(palette="Paired") +
ggtitle( "Rescue Attempt" )
barplot_rescue
# ANOVA was not working due to one infinite value, so deleting this value
processed_dat <- processed_dat %>%
filter(Correct == 1) %>%
filter(is.finite(LogRT))
aov_model <- aov( data = processed_dat,
LogRT ~ StimObj*StimRace + Error(ID/(StimObj*StimRace)))
summary(aov_model)
lmm <- lmerTest::lmer( data = processed_dat,
LogRT ~ StimObj*StimRace + (StimObj*StimRace|ID))
summary(lmm)
tt <- getME(lmm,"theta")
ll <- getME(lmm,"lower")
min(tt[ll==0])
lmm <- lmerTest::lmer( data = processed_dat,
LogRT ~ StimObj*StimRace + (StimObj*StimRace|ID),
REML = TRUE)
summary(lmm)
lmm <- lmerTest::lmer( data = processed_dat,
LogRT ~ StimObj*StimRace + (StimObj*StimRace|ID),
REML = FALSE)
summary(lmm)
install.packages("optimx")
#install.packages("optimx")
library(optimx)
lmm <- lmerTest::lmer( data = processed_dat,
LogRT ~ StimObj*StimRace + (StimObj*StimRace|ID),
REML = T,
control = lmerControl(optimizer ='optimx', optCtrl=list(method='L-BFGS-B')))
summary(lmm)
tt <- getME(lmm,"theta")
ll <- getME(lmm,"lower")
min(tt[ll==0])
lmm <- lmerTest::lmer( data = processed_dat,
LogRT ~ StimObj*StimRace + (StimObj*StimRace|ID),
REML = T,
control = lmerControl(optimizer ="Nelder_Mead"))
summary(lmm)
lmm <- lmerTest::lmer( data = processed_dat,
LogRT ~ StimObj*StimRace + (StimObj*StimRace|ID),
REML = T,
control = lmerControl(optimizer ='optimx', optCtrl=list(method='nlminb')))
summary(lmm)
processed_dat
lmm <- lmerTest::lmer( data = processed_dat,
LogRT ~ StimObj*StimRace + (StimObj*StimRace|ID),
REML = F,
control = lmerControl(optimizer ='optimx', optCtrl=list(method='nlminb')))
summary(lmm)
tt <- getME(lmm,"theta")
ll <- getME(lmm,"lower")
min(tt[ll==0])
lmm <- lmerTest::lmer( data = processed_dat,
LogRT ~ StimObj*StimRace + (StimObj*StimRace|ID),
REML = T,
control = lmerControl(optimizer ='optimx', optCtrl=list(method='nlminb')))
summary(lmm)
lmm <- lmerTest::lmer( data = processed_dat,
LogRT ~ StimObj*StimRace + (StimObj*StimRace|ID),
REML = F,
#control = lmerControl(optimizer ='optimx', optCtrl=list(method='nlminb'))
)
summary(lmm)
help('isSingular')
isSingular(lmm)
lmm <- lmerTest::lmer( data = processed_dat,
LogRT ~ StimObj*StimRace + (StimObj*StimRace|ID),
#   REML = F,
control = lmerControl(optimizer ='optimx', optCtrl=list(method='nlminb')))
summary(lmm)
lmm <- lmerTest::lmer( data = processed_dat,
LogRT ~ StimObj*StimRace + (StimObj*StimRace|ID),
REML = F,
control = lmerControl(optimizer ='optimx', optCtrl=list(method='nlminb')))
summary(lmm)
lmm_par <- lmerTest::lmer( data = data_par,
LogRT ~ target*race_prime + (1|Subj),
REML = F,
control = lmerControl(optimizer ='optimx', optCtrl=list(method='nlminb')))
data_par_raw <- readxl::read_excel("C:/Users/mateu/todd2016_1_rescue/data/parallel_replication_data.xlsx")
data_par <- data_par_raw %>%
select(Subj, race_prime, target, RT, Correct)
# N check
nrow(table(data_par$Subj))
# Checking accuracy
acc_dat_par <- data_par  %>%
group_by(Subj) %>%
summarise(mean_accuracy = mean(Correct))
hist(acc_dat_par$mean_accuracy)
exclude_list_par <- acc_dat_par %>%
filter(mean_accuracy < 0.6) %>%
select(-c(mean_accuracy))
exclude_list_par <- c(exclude_list_par$Subj) # N = 7 people
data_par <- data_par %>%
filter(!(Subj %in% exclude_list_par))
# N check
nrow(table(data_par$Subj))
data_par <- data_par %>%
filter(RT > 0.1 | RT < 500)
# N check
nrow(table(data_par$Subj))
# Turning into factors for ANOVA
data_par$Subj <-  as_factor(data_par$Subj)
data_par$race_prime <-  as_factor(data_par$race_prime)
data_par$target <-  as_factor(data_par$target)
#Looking at summarized data
sum_dat_par <- data_par %>%
filter(Correct == TRUE) %>%
mutate(LogRT = log(RT)) %>%
group_by(race_prime, target, Subj) %>%
get_summary_stats(LogRT, type = "mean_sd")
sum_dat_par
# log transforming
data_par <- data_par %>%
mutate(LogRT = log(RT))
# repeated measures ANOVA
aov_model_par <- aov( data = data_par,
LogRT ~ target*race_prime + Error(Subj/(target*race_prime)))
summary(aov_model_par)
# Consider this model
lmm_par <- lmerTest::lmer( data = data_par,
LogRT ~ target*race_prime + (1|Subj),
REML = F,
control = lmerControl(optimizer ='optimx', optCtrl=list(method='nlminb')))
summary(lmm_par)
simple_slopes(lmm_par)
lmm <- lmerTest::lmer( data = processed_dat,
LogRT ~ StimObj*StimRace + (StimObj+StimRace|ID),
REML = T)
summary(lmm)
lmm <- lmerTest::lmer( data = processed_dat,
LogRT ~ StimObj*StimRace + (StimObj|ID),
REML = T)
summary(lmm)
lmm <- lmerTest::lmer( data = processed_dat,
LogRT ~ StimObj*StimRace + (StimObj|ID) + (StimRace|ID),
REML = T)
summary(lmm)
lmm <- lmerTest::lmer( data = processed_dat,
LogRT ~ StimObj*StimRace + (StimObj+StimRace|ID),
REML = T)
summary(lmm)
lmm <- lmerTest::lmer( data = processed_dat,
LogRT ~ StimObj*StimRace + (StimObj+StimRace|ID),
REML = F)
summary(lmm)
lmm <- lmerTest::lmer( data = processed_dat,
LogRT ~ StimObj*StimRace + (StimObj+StimRace|ID),
REML = F,
control = lmerControl(optimizer ='optimx', optCtrl=list(method='nlminb')))
summary(lmm)
lmm <- lmerTest::lmer( data = processed_dat,
LogRT ~ StimObj*StimRace + (StimObj+StimRace|ID))
summary(lmm)
lmm <- lmerTest::lmer( data = processed_dat,
LogRT ~ StimObj*StimRace + (StimObj*StimRace|ID))
summary(lmm)
lmm <- lmerTest::lmer( data = processed_dat,
LogRT ~ StimObj*StimRace + (StimObj:StimRace|ID))
summary(lmm)
lmm <- lmerTest::lmer( data = processed_dat,
LogRT ~ 1 + (StimObj*StimRace|ID))
summary(lmm)
lmm <- lmerTest::lmer( data = processed_dat,
LogRT ~ StimObj*StimRace + (StimObj*StimRace|ID))
summary(lmm)
ss <- getME(lmm,c("theta","fixef"))
lmm2 <- update(lmm,start=ss,control=glmerControl(optCtrl=list(maxfun=2e4)))
ss <- getME(lmm,c("theta","fixef"))
lmm2 <- update(lmm,start=ss,control=lmerControl(optCtrl=list(maxfun=2e4)))
lmm2
summary(lmm2)
lmm <- lmerTest::lmer( data = processed_dat,
LogRT ~ StimObj*StimRace + (StimObj|ID))
summary(lmm)
simple_slopes(lmm)
lmm_par <- lmerTest::lmer( data = data_par,
LogRT ~ target*race_prime + (target*race_prime|Subj))
summary(lmm_par)
lmm_par <- lmerTest::lmer( data = data_par,
LogRT ~ target*race_prime + (target|Subj))
summary(lmm_par)
simple_slopes(lmm_par)
lmm_par <- lmerTest::lmer( data = data_par,
LogRT ~ target*race_prime + (target|Subj))
summary(lmm_par)
simple_slopes(lmm_par)
simple_slopes()
??simple_slopes()
lmm_par <- lmerTest::lmer( data = data_par,
LogRT ~ target*race_prime + (target|Subj))
summary(lmm_par)
simple_slopes(lmm_par)
lmm_par <- lmerTest::lmer( data = data_par,
LogRT ~ target*race_prime + (target|Subj))
summary(lmm_par)
simple_slopes(lmm_par)
-1.962e-02 / sqrt(0.038056+0.004833+0.170800)
-1.962e-02 / sqrt(0.038056+0.004833)
lmm <- lmerTest::lmer( data = processed_dat,
LogRT ~ StimObj*StimRace + (StimObj|ID))
summary(lmm)
lmm_par <- lmerTest::lmer( data = data_par,
LogRT ~ target*race_prime + (target|Subj))
summary(lmm_par)
#Barplot with CI bars
sum_dat_plot_par <- data_par %>%
filter(Correct == T) %>%
group_by(race_prime, target) %>%
summarise(
n=n(),
mean=mean(RT),
sd=sd(RT)
) %>%
mutate( se=sd/sqrt(n))  %>%
mutate( ci=se * qt((1-0.05)/2 + .5, n-1))
sum_dat_plot_par
barplot_par <- sum_dat_plot_par %>%
ggplot(aes(x=target, y=mean, fill=race_prime)) +
geom_bar(stat = "identity", position=position_dodge()) +
geom_errorbar(aes(ymin=mean-ci, ymax=mean+ci), width=.2,
position=position_dodge(.9)) +
ggthemes::theme_few() +
guides(fill = F) +
coord_cartesian( ylim = c(150, 500)) +
scale_fill_brewer(palette="Paired") +
scale_x_discrete(limits = rev) +
ggtitle( "Parallel Replication Attempt" )
barplot_par
barplot_par <- sum_dat_plot_par %>%
ggplot(aes(x=target, y=mean, fill=race_prime)) +
geom_bar(stat = "identity", position=position_dodge()) +
geom_errorbar(aes(ymin=mean-ci, ymax=mean+ci), width=.2,
position=position_dodge(.9)) +
ggthemes::theme_few() +
# guides(fill = F) +
coord_cartesian( ylim = c(150, 500)) +
scale_fill_brewer(palette="Paired") +
scale_x_discrete(limits = rev) +
ggtitle( "Parallel Replication Attempt" )
barplot_par
# rescue
effectsize::eta_squared(aov_model)
ci.pvaf(F.value=3.552, df.1=1, df.2=54, N=56, conf.level=.95)
ci.pvaf(F.value=3.552, df.1=1, df.2=54, N=56, conf.level=.95)
library(metafor)
#install.packages("MBESS")
library(MBESS)
#install.packages("sjstats")
library(sjstats)
ci.pvaf(F.value=3.552, df.1=1, df.2=54, N=56, conf.level=.95)
library(rsconnect)
remove.packages(rsconnect)
install.packages(rsconnect)
rsconnect::rpubsUpload()
rsconnect::rpubsUpload("ReplicationReport_MateusMazzaferro_v2.qmd")
rsconnect::rpubsUpload(ReplicationReport_MateusMazzaferro_v2.qmd)
rsconnect::rpubsUpload(ReplicationReport_MateusMazzaferro_v2.html)
rsconnect::rpubsUpload("ReplicationReport_MateusMazzaferro_v2.html")
rsconnect::rpubsUpload(x = "ReplicationReport_MateusMazzaferro_v2.html")
rsconnect::rpubsUpload( "ReplicationReport_MateusMazzaferro_v2.html")
rsconnect::rpubsUpload()
rsconnect::rpubsUpload("ReplicationReport_MateusMazzaferro_v2")
??rsconnect::rpubsUpload()
??rpubsUpload()
rsconnect::rpubsUpload("ReplicationReport_MateusMazzaferro_v2","ReplicationReport_MateusMazzaferro_v2.html" )
### Load Relevant Libraries and Functions
library(tidyverse)
library(rstatix)
library(ggplot2)
library(ggpubr)
library(lme4)
library(ez)
library(ggthemes)
library(reghelper)
library(apaTables)
library(optimx)
library(Morpho)
#### reading data in personal computer
dir_path <- "C:/Users/mateu/OneDrive/Desktop/Stanford/01_Fall 2023/Psych Exp Methods/data_prolific_v2"
csv_files <- list.files(dir_path, pattern = "2023-12-12.*\\.csv$", full.names = TRUE)
combined_data <- data.frame()
for (file in csv_files) {
data <- read_csv(file)
combined_data <- bind_rows(combined_data, data)
}
# Storing raw data so I don't have to run this loop all the time
combined_data_raw <- combined_data
View(combined_data_raw)
data_csv <- combined_data_raw %>%
anonymize(participant, remove =1) %>%
select(-c(session,study_id, OS))
combined_data_raw %>%
anonymize(combined_data_raw$participant, remove =1) %>%
select(-c(session,study_id, OS))
combined_data_raw %>%
anonymize(x = participant, remove =1)
combined_data_raw %>%
anonymize(.$participant, remove =1) %>%
select(-c(session,study_id, OS))
data.anom <- combined_data_raw
data.anom$participant <- anonymize(data.anom$participant, remove =1)
anonymize(data.anom$participant, remove =1)
library(anonymizer)
install.packages(anonymizer)
install.packages("anonymizer")
library(anonymizer)
library(anonymizer)
devtools::install_github("paulhendricks/anonymizer")
library(anonymizer)
combined_data_raw %>%
anonymizer::anonymize(participant)
anonymize(data.anom$participant)
